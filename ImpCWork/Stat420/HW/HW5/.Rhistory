cat("Number of variables recorded for each professor:", ncol(prof_evals), "\n")
model <- lm(score ~ bty_avg, data = prof_evals)
summary(model)
sigma_value <- summary(model)$sigma
cat("Estimated value of sigma:", sigma_value, "\n")
x_vals <- prof_evals$bty_avg      # Independent variable (bty_avg)
sigma <- summary(model)$sigma     # Residual standard error from the model
sample_size <- nrow(prof_evals)   # Number of observations
xbar <- mean(x_vals)
Sxx <- sum((x_vals - xbar) ^ 2)
beta_1_sd <- sigma / sqrt(Sxx)
cat("Calculated standard error for the slope:", beta_1_sd, "\n")
slope_se <- coef(summary(model))["bty_avg", "Std. Error"]
cat("Standard error for the slope:", slope_se, "\n")
beauty_ratings <- c(6.25, 9.5)
predicted_scores <- predict(model, newdata = data.frame(bty_avg = beauty_ratings), interval = "confidence", level = 0.99)
lower_bounds <- predicted_scores[, "lwr"]
upper_bounds <- predicted_scores[, "upr"]
intervals <- data.frame(Beauty_Rating = beauty_ratings, Lower_Bound = lower_bounds, Upper_Bound = upper_bounds)
intervals
predicted_score_7_75 <- predict(model, newdata = data.frame(bty_avg = 7.75), interval = "prediction", level = 0.99)
lower_bound_7_75 <- predicted_score_7_75[1, "lwr"]
upper_bound_7_75 <- predicted_score_7_75[1, "upr"]
c(Lower_Bound = lower_bound_7_75, Upper_Bound = upper_bound_7_75)
beta_0 <- coef(model)["(Intercept)"]
beta_1 <- coef(model)["bty_avg"]
y_hat <- (4.0425 + 4.1624) / 2
beauty_rating <- (y_hat - beta_0) / beta_1
beauty_rating
multi_model <- lm(score ~ bty_avg + age + cls_students + cls_perc_eval, data = prof_evals)
summary(multi_model)
model_summary <- summary(multi_model)
t_statistic_bty_avg <- model_summary$coefficients["bty_avg", "t value"]
p_value_bty_avg <- model_summary$coefficients["bty_avg", "Pr(>|t|)"]
c(Test_Statistic = t_statistic_bty_avg, P_Value = p_value_bty_avg)
bty_avg_Z <- 6.25
age_Z <- 52
cls_students_Z <- 61
cls_perc_eval_Z <- 0.83
score_Z <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_Z +
coef(multi_model)["age"] * age_Z +
coef(multi_model)["cls_students"] * cls_students_Z +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_Z
bty_avg_A <- 9.5
age_A <- 34
cls_students_A <- 270
cls_perc_eval_A <- 0.96
score_A <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_A +
coef(multi_model)["age"] * age_A +
coef(multi_model)["cls_students"] * cls_students_A +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_A
c(Professor_Z_Score = score_Z, Professor_A_Score = score_A)
residual_Z <- 4.6 - score_Z
residual_A <- 3.7 - score_A
c(Residual_Professor_Z = residual_Z, Residual_Professor_A = residual_A)
prof_A_data <- data.frame(bty_avg = bty_avg_A,
age = age_A,
cls_students = cls_students_A,
cls_perc_eval = cls_perc_eval_A)
conf_interval_A <- predict(multi_model, newdata = prof_A_data,
interval = "confidence", level = 0.85)
conf_interval_A
prof_Z_data <- data.frame(bty_avg = bty_avg_Z,
age = age_Z,
cls_students = cls_students_Z,
cls_perc_eval = cls_perc_eval_Z)
pred_interval_Z <- predict(multi_model, newdata = prof_Z_data,
interval = "prediction", level = 0.75)
pred_interval_Z
simple_model_r2 <- summary(simple_model)$r.squared
library(ggplot2)
library(MASS)
# Load the necessary library
library(readr)
prof_evals <- read_csv("Prof_Evals.csv", show_col_types = FALSE)
cat("Number of professors:", nrow(prof_evals), "\n")
cat("Number of variables recorded for each professor:", ncol(prof_evals), "\n")
model <- lm(score ~ bty_avg, data = prof_evals)
summary(model)
sigma_value <- summary(model)$sigma
cat("Estimated value of sigma:", sigma_value, "\n")
x_vals <- prof_evals$bty_avg      # Independent variable (bty_avg)
sigma <- summary(model)$sigma     # Residual standard error from the model
sample_size <- nrow(prof_evals)   # Number of observations
xbar <- mean(x_vals)
Sxx <- sum((x_vals - xbar) ^ 2)
beta_1_sd <- sigma / sqrt(Sxx)
cat("Calculated standard error for the slope:", beta_1_sd, "\n")
slope_se <- coef(summary(model))["bty_avg", "Std. Error"]
cat("Standard error for the slope:", slope_se, "\n")
beauty_ratings <- c(6.25, 9.5)
predicted_scores <- predict(model, newdata = data.frame(bty_avg = beauty_ratings), interval = "confidence", level = 0.99)
lower_bounds <- predicted_scores[, "lwr"]
upper_bounds <- predicted_scores[, "upr"]
intervals <- data.frame(Beauty_Rating = beauty_ratings, Lower_Bound = lower_bounds, Upper_Bound = upper_bounds)
intervals
predicted_score_7_75 <- predict(model, newdata = data.frame(bty_avg = 7.75), interval = "prediction", level = 0.99)
lower_bound_7_75 <- predicted_score_7_75[1, "lwr"]
upper_bound_7_75 <- predicted_score_7_75[1, "upr"]
c(Lower_Bound = lower_bound_7_75, Upper_Bound = upper_bound_7_75)
beta_0 <- coef(model)["(Intercept)"]
beta_1 <- coef(model)["bty_avg"]
y_hat <- (4.0425 + 4.1624) / 2
beauty_rating <- (y_hat - beta_0) / beta_1
beauty_rating
multi_model <- lm(score ~ bty_avg + age + cls_students + cls_perc_eval, data = prof_evals)
summary(multi_model)
model_summary <- summary(multi_model)
t_statistic_bty_avg <- model_summary$coefficients["bty_avg", "t value"]
p_value_bty_avg <- model_summary$coefficients["bty_avg", "Pr(>|t|)"]
c(Test_Statistic = t_statistic_bty_avg, P_Value = p_value_bty_avg)
bty_avg_Z <- 6.25
age_Z <- 52
cls_students_Z <- 61
cls_perc_eval_Z <- 0.83
score_Z <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_Z +
coef(multi_model)["age"] * age_Z +
coef(multi_model)["cls_students"] * cls_students_Z +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_Z
bty_avg_A <- 9.5
age_A <- 34
cls_students_A <- 270
cls_perc_eval_A <- 0.96
score_A <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_A +
coef(multi_model)["age"] * age_A +
coef(multi_model)["cls_students"] * cls_students_A +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_A
c(Professor_Z_Score = score_Z, Professor_A_Score = score_A)
residual_Z <- 4.6 - score_Z
residual_A <- 3.7 - score_A
c(Residual_Professor_Z = residual_Z, Residual_Professor_A = residual_A)
prof_A_data <- data.frame(bty_avg = bty_avg_A,
age = age_A,
cls_students = cls_students_A,
cls_perc_eval = cls_perc_eval_A)
conf_interval_A <- predict(multi_model, newdata = prof_A_data,
interval = "confidence", level = 0.85)
conf_interval_A
prof_Z_data <- data.frame(bty_avg = bty_avg_Z,
age = age_Z,
cls_students = cls_students_Z,
cls_perc_eval = cls_perc_eval_Z)
pred_interval_Z <- predict(multi_model, newdata = prof_Z_data,
interval = "prediction", level = 0.75)
pred_interval_Z
model_r2 <- summary(model)$r.squared
multi_model_r2 <- summary(multi_model)$r.squared
c(Simple_Model_R2 = simple_model_r2, Multiple_Model_R2 = multi_model_r2)
library(ggplot2)
library(MASS)
# Load the necessary library
library(readr)
prof_evals <- read_csv("Prof_Evals.csv", show_col_types = FALSE)
cat("Number of professors:", nrow(prof_evals), "\n")
cat("Number of variables recorded for each professor:", ncol(prof_evals), "\n")
model <- lm(score ~ bty_avg, data = prof_evals)
summary(model)
sigma_value <- summary(model)$sigma
cat("Estimated value of sigma:", sigma_value, "\n")
x_vals <- prof_evals$bty_avg      # Independent variable (bty_avg)
sigma <- summary(model)$sigma     # Residual standard error from the model
sample_size <- nrow(prof_evals)   # Number of observations
xbar <- mean(x_vals)
Sxx <- sum((x_vals - xbar) ^ 2)
beta_1_sd <- sigma / sqrt(Sxx)
cat("Calculated standard error for the slope:", beta_1_sd, "\n")
slope_se <- coef(summary(model))["bty_avg", "Std. Error"]
cat("Standard error for the slope:", slope_se, "\n")
beauty_ratings <- c(6.25, 9.5)
predicted_scores <- predict(model, newdata = data.frame(bty_avg = beauty_ratings), interval = "confidence", level = 0.99)
lower_bounds <- predicted_scores[, "lwr"]
upper_bounds <- predicted_scores[, "upr"]
intervals <- data.frame(Beauty_Rating = beauty_ratings, Lower_Bound = lower_bounds, Upper_Bound = upper_bounds)
intervals
predicted_score_7_75 <- predict(model, newdata = data.frame(bty_avg = 7.75), interval = "prediction", level = 0.99)
lower_bound_7_75 <- predicted_score_7_75[1, "lwr"]
upper_bound_7_75 <- predicted_score_7_75[1, "upr"]
c(Lower_Bound = lower_bound_7_75, Upper_Bound = upper_bound_7_75)
beta_0 <- coef(model)["(Intercept)"]
beta_1 <- coef(model)["bty_avg"]
y_hat <- (4.0425 + 4.1624) / 2
beauty_rating <- (y_hat - beta_0) / beta_1
beauty_rating
multi_model <- lm(score ~ bty_avg + age + cls_students + cls_perc_eval, data = prof_evals)
summary(multi_model)
model_summary <- summary(multi_model)
t_statistic_bty_avg <- model_summary$coefficients["bty_avg", "t value"]
p_value_bty_avg <- model_summary$coefficients["bty_avg", "Pr(>|t|)"]
c(Test_Statistic = t_statistic_bty_avg, P_Value = p_value_bty_avg)
bty_avg_Z <- 6.25
age_Z <- 52
cls_students_Z <- 61
cls_perc_eval_Z <- 0.83
score_Z <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_Z +
coef(multi_model)["age"] * age_Z +
coef(multi_model)["cls_students"] * cls_students_Z +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_Z
bty_avg_A <- 9.5
age_A <- 34
cls_students_A <- 270
cls_perc_eval_A <- 0.96
score_A <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_A +
coef(multi_model)["age"] * age_A +
coef(multi_model)["cls_students"] * cls_students_A +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_A
c(Professor_Z_Score = score_Z, Professor_A_Score = score_A)
residual_Z <- 4.6 - score_Z
residual_A <- 3.7 - score_A
c(Residual_Professor_Z = residual_Z, Residual_Professor_A = residual_A)
prof_A_data <- data.frame(bty_avg = bty_avg_A,
age = age_A,
cls_students = cls_students_A,
cls_perc_eval = cls_perc_eval_A)
conf_interval_A <- predict(multi_model, newdata = prof_A_data,
interval = "confidence", level = 0.85)
conf_interval_A
prof_Z_data <- data.frame(bty_avg = bty_avg_Z,
age = age_Z,
cls_students = cls_students_Z,
cls_perc_eval = cls_perc_eval_Z)
pred_interval_Z <- predict(multi_model, newdata = prof_Z_data,
interval = "prediction", level = 0.75)
pred_interval_Z
model_r2 <- summary(model)$r.squared
multi_model_r2 <- summary(multi_model)$r.squared
c(Model_R2 = model_r2, Multiple_Model_R2 = multi_model_r2)
# Use this code chunk for your answer, if needed.
# Use this code chunk for your answer, if needed.
library(ggplot2)
library(MASS)
# Load the necessary library
library(readr)
prof_evals <- read_csv("Prof_Evals.csv", show_col_types = FALSE)
cat("Number of professors:", nrow(prof_evals), "\n")
cat("Number of variables recorded for each professor:", ncol(prof_evals), "\n")
model <- lm(score ~ bty_avg, data = prof_evals)
summary(model)
sigma_value <- summary(model)$sigma
cat("Estimated value of sigma:", sigma_value, "\n")
x_vals <- prof_evals$bty_avg      # Independent variable (bty_avg)
sigma <- summary(model)$sigma     # Residual standard error from the model
sample_size <- nrow(prof_evals)   # Number of observations
xbar <- mean(x_vals)
Sxx <- sum((x_vals - xbar) ^ 2)
beta_1_sd <- sigma / sqrt(Sxx)
cat("Calculated standard error for the slope:", beta_1_sd, "\n")
slope_se <- coef(summary(model))["bty_avg", "Std. Error"]
cat("Standard error for the slope:", slope_se, "\n")
beauty_ratings <- c(6.25, 9.5)
predicted_scores <- predict(model, newdata = data.frame(bty_avg = beauty_ratings), interval = "confidence", level = 0.99)
lower_bounds <- predicted_scores[, "lwr"]
upper_bounds <- predicted_scores[, "upr"]
intervals <- data.frame(Beauty_Rating = beauty_ratings, Lower_Bound = lower_bounds, Upper_Bound = upper_bounds)
intervals
predicted_score_7_75 <- predict(model, newdata = data.frame(bty_avg = 7.75), interval = "prediction", level = 0.99)
lower_bound_7_75 <- predicted_score_7_75[1, "lwr"]
upper_bound_7_75 <- predicted_score_7_75[1, "upr"]
c(Lower_Bound = lower_bound_7_75, Upper_Bound = upper_bound_7_75)
beta_0 <- coef(model)["(Intercept)"]
beta_1 <- coef(model)["bty_avg"]
y_hat <- (4.0425 + 4.1624) / 2
beauty_rating <- (y_hat - beta_0) / beta_1
beauty_rating
multi_model <- lm(score ~ bty_avg + age + cls_students + cls_perc_eval, data = prof_evals)
summary(multi_model)
model_summary <- summary(multi_model)
t_statistic_bty_avg <- model_summary$coefficients["bty_avg", "t value"]
p_value_bty_avg <- model_summary$coefficients["bty_avg", "Pr(>|t|)"]
c(Test_Statistic = t_statistic_bty_avg, P_Value = p_value_bty_avg)
bty_avg_Z <- 6.25
age_Z <- 52
cls_students_Z <- 61
cls_perc_eval_Z <- 0.83
score_Z <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_Z +
coef(multi_model)["age"] * age_Z +
coef(multi_model)["cls_students"] * cls_students_Z +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_Z
bty_avg_A <- 9.5
age_A <- 34
cls_students_A <- 270
cls_perc_eval_A <- 0.96
score_A <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_A +
coef(multi_model)["age"] * age_A +
coef(multi_model)["cls_students"] * cls_students_A +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_A
c(Professor_Z_Score = score_Z, Professor_A_Score = score_A)
residual_Z <- 4.6 - score_Z
residual_A <- 3.7 - score_A
c(Residual_Professor_Z = residual_Z, Residual_Professor_A = residual_A)
prof_A_data <- data.frame(bty_avg = bty_avg_A,
age = age_A,
cls_students = cls_students_A,
cls_perc_eval = cls_perc_eval_A)
conf_interval_A <- predict(multi_model, newdata = prof_A_data,
interval = "confidence", level = 0.85)
conf_interval_A
prof_Z_data <- data.frame(bty_avg = bty_avg_Z,
age = age_Z,
cls_students = cls_students_Z,
cls_perc_eval = cls_perc_eval_Z)
pred_interval_Z <- predict(multi_model, newdata = prof_Z_data,
interval = "prediction", level = 0.75)
pred_interval_Z
model_r2 <- summary(model)$r.squared
multi_model_r2 <- summary(multi_model)$r.squared
c(Model_R2 = model_r2, Multiple_Model_R2 = multi_model_r2)
residuals <- residuals(model)
SSE <- sum(residuals^2)
SST <- sum((prof_evals$score - mean(prof_evals$score))^2)
residuals_multi <- residuals(multi_model)
SSE_multi <- sum(residuals_multi^2)
SST_multi <- sum((prof_evals$score - mean(prof_evals$score))^2)  # SST remains the same for both models
c(SSE = SSE, SSE_Multi = SSE_multi, SST = SST_multi)
# Use this code chunk for your answer, if needed.
library(ggplot2)
library(MASS)
# Load the necessary library
library(readr)
prof_evals <- read_csv("Prof_Evals.csv", show_col_types = FALSE)
cat("Number of professors:", nrow(prof_evals), "\n")
cat("Number of variables recorded for each professor:", ncol(prof_evals), "\n")
model <- lm(score ~ bty_avg, data = prof_evals)
summary(model)
sigma_value <- summary(model)$sigma
cat("Estimated value of sigma:", sigma_value, "\n")
x_vals <- prof_evals$bty_avg      # Independent variable (bty_avg)
sigma <- summary(model)$sigma     # Residual standard error from the model
sample_size <- nrow(prof_evals)   # Number of observations
xbar <- mean(x_vals)
Sxx <- sum((x_vals - xbar) ^ 2)
beta_1_sd <- sigma / sqrt(Sxx)
cat("Calculated standard error for the slope:", beta_1_sd, "\n")
slope_se <- coef(summary(model))["bty_avg", "Std. Error"]
cat("Standard error for the slope:", slope_se, "\n")
beauty_ratings <- c(6.25, 9.5)
predicted_scores <- predict(model, newdata = data.frame(bty_avg = beauty_ratings), interval = "confidence", level = 0.99)
lower_bounds <- predicted_scores[, "lwr"]
upper_bounds <- predicted_scores[, "upr"]
intervals <- data.frame(Beauty_Rating = beauty_ratings, Lower_Bound = lower_bounds, Upper_Bound = upper_bounds)
intervals
predicted_score_7_75 <- predict(model, newdata = data.frame(bty_avg = 7.75), interval = "prediction", level = 0.99)
lower_bound_7_75 <- predicted_score_7_75[1, "lwr"]
upper_bound_7_75 <- predicted_score_7_75[1, "upr"]
c(Lower_Bound = lower_bound_7_75, Upper_Bound = upper_bound_7_75)
beta_0 <- coef(model)["(Intercept)"]
beta_1 <- coef(model)["bty_avg"]
y_hat <- (4.0425 + 4.1624) / 2
beauty_rating <- (y_hat - beta_0) / beta_1
beauty_rating
multi_model <- lm(score ~ bty_avg + age + cls_students + cls_perc_eval, data = prof_evals)
summary(multi_model)
model_summary <- summary(multi_model)
t_statistic_bty_avg <- model_summary$coefficients["bty_avg", "t value"]
p_value_bty_avg <- model_summary$coefficients["bty_avg", "Pr(>|t|)"]
c(Test_Statistic = t_statistic_bty_avg, P_Value = p_value_bty_avg)
bty_avg_Z <- 6.25
age_Z <- 52
cls_students_Z <- 61
cls_perc_eval_Z <- 0.83
score_Z <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_Z +
coef(multi_model)["age"] * age_Z +
coef(multi_model)["cls_students"] * cls_students_Z +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_Z
bty_avg_A <- 9.5
age_A <- 34
cls_students_A <- 270
cls_perc_eval_A <- 0.96
score_A <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_A +
coef(multi_model)["age"] * age_A +
coef(multi_model)["cls_students"] * cls_students_A +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_A
c(Professor_Z_Score = score_Z, Professor_A_Score = score_A)
residual_Z <- 4.6 - score_Z
residual_A <- 3.7 - score_A
c(Residual_Professor_Z = residual_Z, Residual_Professor_A = residual_A)
prof_A_data <- data.frame(bty_avg = bty_avg_A,
age = age_A,
cls_students = cls_students_A,
cls_perc_eval = cls_perc_eval_A)
conf_interval_A <- predict(multi_model, newdata = prof_A_data,
interval = "confidence", level = 0.85)
conf_interval_A
prof_Z_data <- data.frame(bty_avg = bty_avg_Z,
age = age_Z,
cls_students = cls_students_Z,
cls_perc_eval = cls_perc_eval_Z)
pred_interval_Z <- predict(multi_model, newdata = prof_Z_data,
interval = "prediction", level = 0.75)
pred_interval_Z
model_r2 <- summary(model)$r.squared
multi_model_r2 <- summary(multi_model)$r.squared
c(Model_R2 = model_r2, Multiple_Model_R2 = multi_model_r2)
residuals <- residuals(model)
SSE <- sum(residuals^2)
SST <- sum((prof_evals$score - mean(prof_evals$score))^2)
residuals_multi <- residuals(multi_model)
SSE_multi <- sum(residuals_multi^2)
SST_multi <- sum((prof_evals$score - mean(prof_evals$score))^2)  # SST remains the same for both models
c(SSE = SSE, SSE_Multi = SSE_multi, SST = SST_multi)
# For the simple model
num_obs <- nrow(prof_evals)
num_parameters <- length(coef(model))
df <- num_obs - num_parameters
# For the multiple regression model
num_parameters_multi <- length(coef(multi_model))
df_multi <- num_obs - num_parameters_multi
c(DF = df, DF_Multi = df_multi)
library(ggplot2)
library(MASS)
# Load the necessary library
library(readr)
prof_evals <- read_csv("Prof_Evals.csv", show_col_types = FALSE)
cat("Number of professors:", nrow(prof_evals), "\n")
cat("Number of variables recorded for each professor:", ncol(prof_evals), "\n")
model <- lm(score ~ bty_avg, data = prof_evals)
summary(model)
sigma_value <- summary(model)$sigma
cat("Estimated value of sigma:", sigma_value, "\n")
x_vals <- prof_evals$bty_avg      # Independent variable (bty_avg)
sigma <- summary(model)$sigma     # Residual standard error from the model
sample_size <- nrow(prof_evals)   # Number of observations
xbar <- mean(x_vals)
Sxx <- sum((x_vals - xbar) ^ 2)
beta_1_sd <- sigma / sqrt(Sxx)
cat("Calculated standard error for the slope:", beta_1_sd, "\n")
slope_se <- coef(summary(model))["bty_avg", "Std. Error"]
cat("Standard error for the slope:", slope_se, "\n")
beauty_ratings <- c(6.25, 9.5)
predicted_scores <- predict(model, newdata = data.frame(bty_avg = beauty_ratings), interval = "confidence", level = 0.99)
lower_bounds <- predicted_scores[, "lwr"]
upper_bounds <- predicted_scores[, "upr"]
intervals <- data.frame(Beauty_Rating = beauty_ratings, Lower_Bound = lower_bounds, Upper_Bound = upper_bounds)
intervals
predicted_score_7_75 <- predict(model, newdata = data.frame(bty_avg = 7.75), interval = "prediction", level = 0.99)
lower_bound_7_75 <- predicted_score_7_75[1, "lwr"]
upper_bound_7_75 <- predicted_score_7_75[1, "upr"]
c(Lower_Bound = lower_bound_7_75, Upper_Bound = upper_bound_7_75)
beta_0 <- coef(model)["(Intercept)"]
beta_1 <- coef(model)["bty_avg"]
y_hat <- (4.0425 + 4.1624) / 2
beauty_rating <- (y_hat - beta_0) / beta_1
beauty_rating
multi_model <- lm(score ~ bty_avg + age + cls_students + cls_perc_eval, data = prof_evals)
summary(multi_model)
model_summary <- summary(multi_model)
t_statistic_bty_avg <- model_summary$coefficients["bty_avg", "t value"]
p_value_bty_avg <- model_summary$coefficients["bty_avg", "Pr(>|t|)"]
c(Test_Statistic = t_statistic_bty_avg, P_Value = p_value_bty_avg)
bty_avg_Z <- 6.25
age_Z <- 52
cls_students_Z <- 61
cls_perc_eval_Z <- 0.83
score_Z <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_Z +
coef(multi_model)["age"] * age_Z +
coef(multi_model)["cls_students"] * cls_students_Z +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_Z
bty_avg_A <- 9.5
age_A <- 34
cls_students_A <- 270
cls_perc_eval_A <- 0.96
score_A <- coef(multi_model)["(Intercept)"] +
coef(multi_model)["bty_avg"] * bty_avg_A +
coef(multi_model)["age"] * age_A +
coef(multi_model)["cls_students"] * cls_students_A +
coef(multi_model)["cls_perc_eval"] * cls_perc_eval_A
c(Professor_Z_Score = score_Z, Professor_A_Score = score_A)
residual_Z <- 4.6 - score_Z
residual_A <- 3.7 - score_A
c(Residual_Professor_Z = residual_Z, Residual_Professor_A = residual_A)
prof_A_data <- data.frame(bty_avg = bty_avg_A,
age = age_A,
cls_students = cls_students_A,
cls_perc_eval = cls_perc_eval_A)
conf_interval_A <- predict(multi_model, newdata = prof_A_data,
interval = "confidence", level = 0.85)
conf_interval_A
prof_Z_data <- data.frame(bty_avg = bty_avg_Z,
age = age_Z,
cls_students = cls_students_Z,
cls_perc_eval = cls_perc_eval_Z)
pred_interval_Z <- predict(multi_model, newdata = prof_Z_data,
interval = "prediction", level = 0.75)
pred_interval_Z
model_r2 <- summary(model)$r.squared
multi_model_r2 <- summary(multi_model)$r.squared
c(Model_R2 = model_r2, Multiple_Model_R2 = multi_model_r2)
residuals <- residuals(model)
SSE <- sum(residuals^2)
SST <- sum((prof_evals$score - mean(prof_evals$score))^2)
residuals_multi <- residuals(multi_model)
SSE_multi <- sum(residuals_multi^2)
SST_multi <- sum((prof_evals$score - mean(prof_evals$score))^2)  # SST remains the same for both models
c(SSE = SSE, SSE_Multi = SSE_multi, SST = SST_multi)
# For the simple model
num_obs <- nrow(prof_evals)
num_parameters <- length(coef(model))
df <- num_obs - num_parameters
# For the multiple regression model
num_parameters_multi <- length(coef(multi_model))
df_multi <- num_obs - num_parameters_multi
c(DF = df, DF_Multi = df_multi)
