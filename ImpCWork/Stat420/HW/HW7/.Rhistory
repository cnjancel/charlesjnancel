selected_model <- ifelse(lowest_bic == bic_backward, "backward",
ifelse(lowest_bic == bic_forward, "forward", "stepwise"))
list(same_model = all_models_same, BICs = c(backward = bic_backward, forward = bic_forward, stepwise = bic_stepwise), selected_model = selected_model)
exhaustive_search <- regsubsets(Calories ~ Fat + SatFat + TransFat + Cholesterol + Sodium + Carbs + Fiber + Sugar + Protein + Serving, data = chickfila_data, nvmax = 10, method="exhaustive")
summary(exhaustive_search)
calculate_AIC <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(AIC(model))
}
formulas <- c(
"Calories ~ Fat",
"Calories ~ Fat + Carbs",
"Calories ~ Fat + Carbs + Protein",
"Calories ~ Fat + Carbs + Protein + Sugar",
"Calories ~ Fat + SatFat + Carbs + Protein + Fiber",
"Calories ~ Fat + SatFat + Carbs + Protein + Fiber + Serving",
"Calories ~ Fat + SatFat + Sodium + Carbs + Protein + Fiber + Serving",
"Calories ~ Fat + SatFat + Sodium + Carbs + Protein + Fiber + Sugar + Serving",
"Calories ~ Fat + SatFat + Cholesterol + Sodium + Carbs + Protein + Fiber + Sugar + Serving",
"Calories ~ Fat + SatFat + TransFat + Cholesterol + Sodium + Carbs + Protein + Fiber + Sugar + Serving"
)
AIC_values <- sapply(formulas, calculate_AIC)
min_AIC_formula <- formulas[which.min(AIC_values)]
min_AIC_formula
calculate_BIC <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(BIC(model))
}
BIC_values <- sapply(formulas, calculate_BIC)
min_BIC_formula <- formulas[which.min(BIC_values)]
min_BIC_formula
calculate_adj_R2 <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(summary(model)$adj.r.squared)
}
adj_R2_values <- sapply(formulas, calculate_adj_R2)
max_adj_R2_formula <- formulas[which.max(adj_R2_values)]
max_adj_R2_formula
calculate_RMSE <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
predictions <- predict(model, chickfila_data)
return(sqrt(mean((predictions - chickfila_data$Calories)^2)))
}
RMSE_values <- sapply(formulas, calculate_RMSE)
min_RMSE_formula <- formulas[which.min(RMSE_values)]
min_RMSE_formula
# Use this code chunk for your answer.
# Use this code chunk for your answer.
library(ggplot2)
library(MASS)
library(leaps)
chickfila_data <- read.csv("chickfila.csv")
head(chickfila_data)
n <- ncol(chickfila_data) - 1
total_models <- 2^n - 1
total_models
alpha <- 0.01
current_formula <- Calories ~ .
model <- lm(current_formula, data = chickfila_data)
cat("Starting Model:\n")
print(summary(model))
cat("\n\n")
while (TRUE) {
predictors <- names(summary(model)$coefficients)[-1]
pvals <- summary(model)$coefficients[predictors, 4]
if (all(pvals <= alpha)) {
cat("Final Model:\n")
print(summary(model))
cat("\n\n")
break
}
predictor_to_remove <- names(which.max(pvals))
predictors <- setdiff(predictors, predictor_to_remove)
current_formula <- as.formula(paste("Calories ~", paste(predictors, collapse=" + ")))
model <- lm(current_formula, data = chickfila_data)
cat("After removing", predictor_to_remove, ":\n")
print(summary(model))
cat("\n\n")
}
full_model <- lm(Calories ~ ., data = chickfila_data)
current_model <- full_model
lowest_BIC <- BIC(current_model)
continue_searching <- TRUE
while (continue_searching) {
continue_searching <- FALSE
all_predictors <- names(coef(current_model))[-1]
best_BIC <- lowest_BIC
best_model <- current_model
for (predictor in all_predictors) {
reduced_formula <- as.formula(paste("Calories ~", paste(setdiff(all_predictors, predictor), collapse = "+")))
reduced_model <- lm(reduced_formula, data = chickfila_data)
reduced_BIC <- BIC(reduced_model)
if (reduced_BIC < best_BIC) {
best_BIC <- reduced_BIC
best_model <- reduced_model
}
}
if (best_BIC < lowest_BIC) {
current_model <- best_model
lowest_BIC <- best_BIC
continue_searching <- TRUE
}
}
final_predictors <- names(coef(current_model))[-1]
final_predictors
backward_model <- current_model
null_model <- lm(Calories ~ 1, data = chickfila_data)
current_model <- null_model
lowest_BIC <- BIC(current_model)
all_predictors <- names(chickfila_data)[-1]
used_predictors <- c()
continue_searching <- TRUE
first_step_predictors <- NULL
while (continue_searching) {
continue_searching <- FALSE
best_BIC <- lowest_BIC
best_model <- current_model
for (predictor in setdiff(all_predictors, used_predictors)) {
extended_formula <- as.formula(paste("Calories ~", paste(c(used_predictors, predictor), collapse = "+")))
extended_model <- lm(extended_formula, data = chickfila_data)
extended_BIC <- BIC(extended_model)
if (extended_BIC < best_BIC) {
best_BIC <- extended_BIC
best_model <- extended_model
}
}
if (best_BIC < lowest_BIC) {
current_model <- best_model
lowest_BIC <- best_BIC
continue_searching <- TRUE
used_predictors <- names(coef(current_model))[-1]
if (is.null(first_step_predictors)) {
first_step_predictors <- used_predictors
}
}
}
list(first_step = first_step_predictors, final_model = used_predictors)
forward_model <- current_model
start_model <- lm(Calories ~ 1, data = chickfila_data)
stepwise_model <- step(start_model, direction = "both", scope = list(lower = ~1, upper = ~Fat+SatFat+TransFat+Cholesterol+Sodium+Carbs+Fiber+Sugar+Protein+Serving), trace = 0, k = log(nrow(chickfila_data)))
final_predictors_stepwise <- names(coef(stepwise_model))[-1]
final_predictors_stepwise
# 1. Compare models
same_model_backward_forward <- isTRUE(all.equal(coef(backward_model), coef(forward_model)))
same_model_forward_stepwise <- isTRUE(all.equal(coef(forward_model), coef(stepwise_model)))
same_model_backward_stepwise <- isTRUE(all.equal(coef(backward_model), coef(stepwise_model)))
all_models_same <- same_model_backward_forward && same_model_forward_stepwise && same_model_backward_stepwise
# 2. Compute BIC for each model
bic_backward <- BIC(backward_model)
bic_forward <- BIC(forward_model)
bic_stepwise <- BIC(stepwise_model)
# 3. Decide which model to select based on BIC
lowest_bic <- min(bic_backward, bic_forward, bic_stepwise)
selected_model <- ifelse(lowest_bic == bic_backward, "backward",
ifelse(lowest_bic == bic_forward, "forward", "stepwise"))
list(same_model = all_models_same, BICs = c(backward = bic_backward, forward = bic_forward, stepwise = bic_stepwise), selected_model = selected_model)
exhaustive_search <- regsubsets(Calories ~ Fat + SatFat + TransFat + Cholesterol + Sodium + Carbs + Fiber + Sugar + Protein + Serving, data = chickfila_data, nvmax = 10, method="exhaustive")
summary(exhaustive_search)
calculate_AIC <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(AIC(model))
}
formulas <- c(
"Calories ~ Fat",
"Calories ~ Fat + Carbs",
"Calories ~ Fat + Carbs + Protein",
"Calories ~ Fat + Carbs + Protein + Sugar",
"Calories ~ Fat + SatFat + Carbs + Protein + Fiber",
"Calories ~ Fat + SatFat + Carbs + Protein + Fiber + Serving",
"Calories ~ Fat + SatFat + Sodium + Carbs + Protein + Fiber + Serving",
"Calories ~ Fat + SatFat + Sodium + Carbs + Protein + Fiber + Sugar + Serving",
"Calories ~ Fat + SatFat + Cholesterol + Sodium + Carbs + Protein + Fiber + Sugar + Serving",
"Calories ~ Fat + SatFat + TransFat + Cholesterol + Sodium + Carbs + Protein + Fiber + Sugar + Serving"
)
AIC_values <- sapply(formulas, calculate_AIC)
min_AIC_formula <- formulas[which.min(AIC_values)]
min_AIC_formula
calculate_BIC <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(BIC(model))
}
BIC_values <- sapply(formulas, calculate_BIC)
min_BIC_formula <- formulas[which.min(BIC_values)]
min_BIC_formula
calculate_adj_R2 <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(summary(model)$adj.r.squared)
}
adj_R2_values <- sapply(formulas, calculate_adj_R2)
max_adj_R2_formula <- formulas[which.max(adj_R2_values)]
max_adj_R2_formula
calculate_RMSE <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
predictions <- predict(model, chickfila_data)
return(sqrt(mean((predictions - chickfila_data$Calories)^2)))
}
RMSE_values <- sapply(formulas, calculate_RMSE)
min_RMSE_formula <- formulas[which.min(RMSE_values)]
min_RMSE_formula
cat_model <- lm(Hwt ~ Bwt + Sex, data = cats)
summary(cat_model)
# Use this code chunk for your answer.
library(ggplot2)
library(MASS)
library(leaps)
chickfila_data <- read.csv("chickfila.csv")
head(chickfila_data)
n <- ncol(chickfila_data) - 1
total_models <- 2^n - 1
total_models
alpha <- 0.01
current_formula <- Calories ~ .
model <- lm(current_formula, data = chickfila_data)
cat("Starting Model:\n")
print(summary(model))
cat("\n\n")
while (TRUE) {
predictors <- names(summary(model)$coefficients)[-1]
pvals <- summary(model)$coefficients[predictors, 4]
if (all(pvals <= alpha)) {
cat("Final Model:\n")
print(summary(model))
cat("\n\n")
break
}
predictor_to_remove <- names(which.max(pvals))
predictors <- setdiff(predictors, predictor_to_remove)
current_formula <- as.formula(paste("Calories ~", paste(predictors, collapse=" + ")))
model <- lm(current_formula, data = chickfila_data)
cat("After removing", predictor_to_remove, ":\n")
print(summary(model))
cat("\n\n")
}
full_model <- lm(Calories ~ ., data = chickfila_data)
current_model <- full_model
lowest_BIC <- BIC(current_model)
continue_searching <- TRUE
while (continue_searching) {
continue_searching <- FALSE
all_predictors <- names(coef(current_model))[-1]
best_BIC <- lowest_BIC
best_model <- current_model
for (predictor in all_predictors) {
reduced_formula <- as.formula(paste("Calories ~", paste(setdiff(all_predictors, predictor), collapse = "+")))
reduced_model <- lm(reduced_formula, data = chickfila_data)
reduced_BIC <- BIC(reduced_model)
if (reduced_BIC < best_BIC) {
best_BIC <- reduced_BIC
best_model <- reduced_model
}
}
if (best_BIC < lowest_BIC) {
current_model <- best_model
lowest_BIC <- best_BIC
continue_searching <- TRUE
}
}
final_predictors <- names(coef(current_model))[-1]
final_predictors
backward_model <- current_model
null_model <- lm(Calories ~ 1, data = chickfila_data)
current_model <- null_model
lowest_BIC <- BIC(current_model)
all_predictors <- names(chickfila_data)[-1]
used_predictors <- c()
continue_searching <- TRUE
first_step_predictors <- NULL
while (continue_searching) {
continue_searching <- FALSE
best_BIC <- lowest_BIC
best_model <- current_model
for (predictor in setdiff(all_predictors, used_predictors)) {
extended_formula <- as.formula(paste("Calories ~", paste(c(used_predictors, predictor), collapse = "+")))
extended_model <- lm(extended_formula, data = chickfila_data)
extended_BIC <- BIC(extended_model)
if (extended_BIC < best_BIC) {
best_BIC <- extended_BIC
best_model <- extended_model
}
}
if (best_BIC < lowest_BIC) {
current_model <- best_model
lowest_BIC <- best_BIC
continue_searching <- TRUE
used_predictors <- names(coef(current_model))[-1]
if (is.null(first_step_predictors)) {
first_step_predictors <- used_predictors
}
}
}
list(first_step = first_step_predictors, final_model = used_predictors)
forward_model <- current_model
start_model <- lm(Calories ~ 1, data = chickfila_data)
stepwise_model <- step(start_model, direction = "both", scope = list(lower = ~1, upper = ~Fat+SatFat+TransFat+Cholesterol+Sodium+Carbs+Fiber+Sugar+Protein+Serving), trace = 0, k = log(nrow(chickfila_data)))
final_predictors_stepwise <- names(coef(stepwise_model))[-1]
final_predictors_stepwise
# 1. Compare models
same_model_backward_forward <- isTRUE(all.equal(coef(backward_model), coef(forward_model)))
same_model_forward_stepwise <- isTRUE(all.equal(coef(forward_model), coef(stepwise_model)))
same_model_backward_stepwise <- isTRUE(all.equal(coef(backward_model), coef(stepwise_model)))
all_models_same <- same_model_backward_forward && same_model_forward_stepwise && same_model_backward_stepwise
# 2. Compute BIC for each model
bic_backward <- BIC(backward_model)
bic_forward <- BIC(forward_model)
bic_stepwise <- BIC(stepwise_model)
# 3. Decide which model to select based on BIC
lowest_bic <- min(bic_backward, bic_forward, bic_stepwise)
selected_model <- ifelse(lowest_bic == bic_backward, "backward",
ifelse(lowest_bic == bic_forward, "forward", "stepwise"))
list(same_model = all_models_same, BICs = c(backward = bic_backward, forward = bic_forward, stepwise = bic_stepwise), selected_model = selected_model)
exhaustive_search <- regsubsets(Calories ~ Fat + SatFat + TransFat + Cholesterol + Sodium + Carbs + Fiber + Sugar + Protein + Serving, data = chickfila_data, nvmax = 10, method="exhaustive")
summary(exhaustive_search)
calculate_AIC <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(AIC(model))
}
formulas <- c(
"Calories ~ Fat",
"Calories ~ Fat + Carbs",
"Calories ~ Fat + Carbs + Protein",
"Calories ~ Fat + Carbs + Protein + Sugar",
"Calories ~ Fat + SatFat + Carbs + Protein + Fiber",
"Calories ~ Fat + SatFat + Carbs + Protein + Fiber + Serving",
"Calories ~ Fat + SatFat + Sodium + Carbs + Protein + Fiber + Serving",
"Calories ~ Fat + SatFat + Sodium + Carbs + Protein + Fiber + Sugar + Serving",
"Calories ~ Fat + SatFat + Cholesterol + Sodium + Carbs + Protein + Fiber + Sugar + Serving",
"Calories ~ Fat + SatFat + TransFat + Cholesterol + Sodium + Carbs + Protein + Fiber + Sugar + Serving"
)
AIC_values <- sapply(formulas, calculate_AIC)
min_AIC_formula <- formulas[which.min(AIC_values)]
min_AIC_formula
calculate_BIC <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(BIC(model))
}
BIC_values <- sapply(formulas, calculate_BIC)
min_BIC_formula <- formulas[which.min(BIC_values)]
min_BIC_formula
calculate_adj_R2 <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(summary(model)$adj.r.squared)
}
adj_R2_values <- sapply(formulas, calculate_adj_R2)
max_adj_R2_formula <- formulas[which.max(adj_R2_values)]
max_adj_R2_formula
calculate_RMSE <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
predictions <- predict(model, chickfila_data)
return(sqrt(mean((predictions - chickfila_data$Calories)^2)))
}
RMSE_values <- sapply(formulas, calculate_RMSE)
min_RMSE_formula <- formulas[which.min(RMSE_values)]
min_RMSE_formula
cat_model <- lm(Hwt ~ Bwt + Sex, data = cats)
summary(cat_model)
model_sex_only <- lm(Hwt ~ Sex, data = cats)
summary(model_sex_only)
library(ggplot2)
library(MASS)
library(leaps)
chickfila_data <- read.csv("chickfila.csv")
head(chickfila_data)
n <- ncol(chickfila_data) - 1
total_models <- 2^n - 1
total_models
alpha <- 0.01
current_formula <- Calories ~ .
model <- lm(current_formula, data = chickfila_data)
cat("Starting Model:\n")
print(summary(model))
cat("\n\n")
while (TRUE) {
predictors <- names(summary(model)$coefficients)[-1]
pvals <- summary(model)$coefficients[predictors, 4]
if (all(pvals <= alpha)) {
cat("Final Model:\n")
print(summary(model))
cat("\n\n")
break
}
predictor_to_remove <- names(which.max(pvals))
predictors <- setdiff(predictors, predictor_to_remove)
current_formula <- as.formula(paste("Calories ~", paste(predictors, collapse=" + ")))
model <- lm(current_formula, data = chickfila_data)
cat("After removing", predictor_to_remove, ":\n")
print(summary(model))
cat("\n\n")
}
full_model <- lm(Calories ~ ., data = chickfila_data)
current_model <- full_model
lowest_BIC <- BIC(current_model)
continue_searching <- TRUE
while (continue_searching) {
continue_searching <- FALSE
all_predictors <- names(coef(current_model))[-1]
best_BIC <- lowest_BIC
best_model <- current_model
for (predictor in all_predictors) {
reduced_formula <- as.formula(paste("Calories ~", paste(setdiff(all_predictors, predictor), collapse = "+")))
reduced_model <- lm(reduced_formula, data = chickfila_data)
reduced_BIC <- BIC(reduced_model)
if (reduced_BIC < best_BIC) {
best_BIC <- reduced_BIC
best_model <- reduced_model
}
}
if (best_BIC < lowest_BIC) {
current_model <- best_model
lowest_BIC <- best_BIC
continue_searching <- TRUE
}
}
final_predictors <- names(coef(current_model))[-1]
final_predictors
backward_model <- current_model
null_model <- lm(Calories ~ 1, data = chickfila_data)
current_model <- null_model
lowest_BIC <- BIC(current_model)
all_predictors <- names(chickfila_data)[-1]
used_predictors <- c()
continue_searching <- TRUE
first_step_predictors <- NULL
while (continue_searching) {
continue_searching <- FALSE
best_BIC <- lowest_BIC
best_model <- current_model
for (predictor in setdiff(all_predictors, used_predictors)) {
extended_formula <- as.formula(paste("Calories ~", paste(c(used_predictors, predictor), collapse = "+")))
extended_model <- lm(extended_formula, data = chickfila_data)
extended_BIC <- BIC(extended_model)
if (extended_BIC < best_BIC) {
best_BIC <- extended_BIC
best_model <- extended_model
}
}
if (best_BIC < lowest_BIC) {
current_model <- best_model
lowest_BIC <- best_BIC
continue_searching <- TRUE
used_predictors <- names(coef(current_model))[-1]
if (is.null(first_step_predictors)) {
first_step_predictors <- used_predictors
}
}
}
list(first_step = first_step_predictors, final_model = used_predictors)
forward_model <- current_model
start_model <- lm(Calories ~ 1, data = chickfila_data)
stepwise_model <- step(start_model, direction = "both", scope = list(lower = ~1, upper = ~Fat+SatFat+TransFat+Cholesterol+Sodium+Carbs+Fiber+Sugar+Protein+Serving), trace = 0, k = log(nrow(chickfila_data)))
final_predictors_stepwise <- names(coef(stepwise_model))[-1]
final_predictors_stepwise
# 1. Compare models
same_model_backward_forward <- isTRUE(all.equal(coef(backward_model), coef(forward_model)))
same_model_forward_stepwise <- isTRUE(all.equal(coef(forward_model), coef(stepwise_model)))
same_model_backward_stepwise <- isTRUE(all.equal(coef(backward_model), coef(stepwise_model)))
all_models_same <- same_model_backward_forward && same_model_forward_stepwise && same_model_backward_stepwise
# 2. Compute BIC for each model
bic_backward <- BIC(backward_model)
bic_forward <- BIC(forward_model)
bic_stepwise <- BIC(stepwise_model)
# 3. Decide which model to select based on BIC
lowest_bic <- min(bic_backward, bic_forward, bic_stepwise)
selected_model <- ifelse(lowest_bic == bic_backward, "backward",
ifelse(lowest_bic == bic_forward, "forward", "stepwise"))
list(same_model = all_models_same, BICs = c(backward = bic_backward, forward = bic_forward, stepwise = bic_stepwise), selected_model = selected_model)
exhaustive_search <- regsubsets(Calories ~ Fat + SatFat + TransFat + Cholesterol + Sodium + Carbs + Fiber + Sugar + Protein + Serving, data = chickfila_data, nvmax = 10, method="exhaustive")
summary(exhaustive_search)
calculate_AIC <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(AIC(model))
}
formulas <- c(
"Calories ~ Fat",
"Calories ~ Fat + Carbs",
"Calories ~ Fat + Carbs + Protein",
"Calories ~ Fat + Carbs + Protein + Sugar",
"Calories ~ Fat + SatFat + Carbs + Protein + Fiber",
"Calories ~ Fat + SatFat + Carbs + Protein + Fiber + Serving",
"Calories ~ Fat + SatFat + Sodium + Carbs + Protein + Fiber + Serving",
"Calories ~ Fat + SatFat + Sodium + Carbs + Protein + Fiber + Sugar + Serving",
"Calories ~ Fat + SatFat + Cholesterol + Sodium + Carbs + Protein + Fiber + Sugar + Serving",
"Calories ~ Fat + SatFat + TransFat + Cholesterol + Sodium + Carbs + Protein + Fiber + Sugar + Serving"
)
AIC_values <- sapply(formulas, calculate_AIC)
min_AIC_formula <- formulas[which.min(AIC_values)]
min_AIC_formula
calculate_BIC <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(BIC(model))
}
BIC_values <- sapply(formulas, calculate_BIC)
min_BIC_formula <- formulas[which.min(BIC_values)]
min_BIC_formula
calculate_adj_R2 <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
return(summary(model)$adj.r.squared)
}
adj_R2_values <- sapply(formulas, calculate_adj_R2)
max_adj_R2_formula <- formulas[which.max(adj_R2_values)]
max_adj_R2_formula
calculate_RMSE <- function(formula_string) {
model <- lm(formula_string, data = chickfila_data)
predictions <- predict(model, chickfila_data)
return(sqrt(mean((predictions - chickfila_data$Calories)^2)))
}
RMSE_values <- sapply(formulas, calculate_RMSE)
min_RMSE_formula <- formulas[which.min(RMSE_values)]
min_RMSE_formula
cat_model <- lm(Hwt ~ Bwt + Sex, data = cats)
summary(cat_model)
model_sex_only <- lm(Hwt ~ Sex, data = cats)
summary(model_sex_only)
