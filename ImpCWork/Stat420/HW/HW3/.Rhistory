# Dots plot
ggplot(dots, aes(x, y)) +
geom_point() +
labs(title = "dots", x = "x", y = "y")
# Circle plot
ggplot(circle, aes(x, y)) +
geom_point() +
labs(title = "circle", x = "x", y = "y")
# Wide_lines plot
ggplot(wide_lines, aes(x, y)) +
geom_point() +
labs(title = "wide_lines", x = "x", y = "y")
?birthwt
library(MASS)
# Getting the number of observations
num_observations <- nrow(birthwt)
# Getting the number of variables
num_variables <- ncol(birthwt)
num_observations
num_variables
# Assuming you have loaded the MASS package and its dataset
library(MASS)
# Selecting the relevant columns
selected_data <- birthwt[, c("bwt", "age", "lwt")]
# Creating the correlation matrix
cor_matrix <- cor(selected_data)
cor_matrix
library(ggplot2)
# Scatter plot for lwt vs bwt
ggplot(birthwt, aes(x = lwt, y = bwt)) +
geom_point() +
labs(title = "Relationship between Mother's Pre-pregnancy Weight and Baby's Weight",
x = "Mother's Pre-pregnancy Weight (lwt)",
y = "Baby's Weight (bwt)") +
theme_minimal()
# Fitting the linear model
model <- lm(bwt ~ lwt, data = birthwt)
# Displaying the model summary to retrieve coefficients
summary(model)
# Given coefficients and lwt value
intercept <- 2369.624
slope <- 4.429
lwt_value <- 147
# Calculate predicted bwt
predicted_bwt <- intercept + slope * lwt_value
# Calculate the residual
observed_bwt <- 3000
residual <- observed_bwt - predicted_bwt
predicted_bwt, residual
# Given coefficients and lwt value
intercept <- 2369.624
slope <- 4.429
lwt_value <- 147
# Calculate predicted bwt
predicted_bwt <- intercept + slope * lwt_value
# Calculate the residual
observed_bwt <- 3000
residual <- observed_bwt - predicted_bwt
predicted_bwt
residual
# install.packages('datasauRus')
# install.packages('MASS')
library(ggplot2)
library(datasauRus)
library(MASS)
head(datasaurus_dozen)
dino <- datasaurus_dozen[datasaurus_dozen$dataset == "dino", ]
dots <- datasaurus_dozen[datasaurus_dozen$dataset == "dots", ]
circle <- datasaurus_dozen[datasaurus_dozen$dataset == "circle", ]
wide_lines <- datasaurus_dozen[datasaurus_dozen$dataset == "wide_lines", ]
dino_stats <- list(
rows_columns = dim(dino),
mean_x = mean(dino$x),
mean_y = mean(dino$y)
)
dots_stats <- list(
rows_columns = dim(dots),
mean_x = mean(dots$x),
mean_y = mean(dots$y)
)
circle_stats <- list(
rows_columns = dim(circle),
mean_x = mean(circle$x),
mean_y = mean(circle$y)
)
wide_lines_stats <- list(
rows_columns = dim(wide_lines),
mean_x = mean(wide_lines$x),
mean_y = mean(wide_lines$y)
)
list(dino = dino_stats, dots = dots_stats, circle = circle_stats, wide_lines = wide_lines_stats)
# For the dino dataset
dino_cor <- cor(dino$x, dino$y)
dino_lm <- lm(y ~ x, data = dino)
dino_coeffs <- coef(dino_lm)
# For the dots dataset
dots_cor <- cor(dots$x, dots$y)
dots_lm <- lm(y ~ x, data = dots)
dots_coeffs <- coef(dots_lm)
# For the circle dataset
circle_cor <- cor(circle$x, circle$y)
circle_lm <- lm(y ~ x, data = circle)
circle_coeffs <- coef(circle_lm)
# For the wide_lines dataset
wide_lines_cor <- cor(wide_lines$x, wide_lines$y)
wide_lines_lm <- lm(y ~ x, data = wide_lines)
wide_lines_coeffs <- coef(wide_lines_lm)
# Print out the results
list(
dino = list(correlation = dino_cor, coefficients = dino_coeffs),
dots = list(correlation = dots_cor, coefficients = dots_coeffs),
circle = list(correlation = circle_cor, coefficients = circle_coeffs),
wide_lines = list(correlation = wide_lines_cor, coefficients = wide_lines_coeffs)
)
# Dino plot
ggplot(dino, aes(x, y)) +
geom_point() +
labs(title = "dino", x = "x", y = "y")
# Dots plot
ggplot(dots, aes(x, y)) +
geom_point() +
labs(title = "dots", x = "x", y = "y")
# Circle plot
ggplot(circle, aes(x, y)) +
geom_point() +
labs(title = "circle", x = "x", y = "y")
# Wide_lines plot
ggplot(wide_lines, aes(x, y)) +
geom_point() +
labs(title = "wide_lines", x = "x", y = "y")
?birthwt
library(MASS)
# Getting the number of observations
num_observations <- nrow(birthwt)
# Getting the number of variables
num_variables <- ncol(birthwt)
num_observations
num_variables
# Assuming you have loaded the MASS package and its dataset
library(MASS)
# Selecting the relevant columns
selected_data <- birthwt[, c("bwt", "age", "lwt")]
# Creating the correlation matrix
cor_matrix <- cor(selected_data)
cor_matrix
library(ggplot2)
# Scatter plot for lwt vs bwt
ggplot(birthwt, aes(x = lwt, y = bwt)) +
geom_point() +
labs(title = "Relationship between Mother's Pre-pregnancy Weight and Baby's Weight",
x = "Mother's Pre-pregnancy Weight (lwt)",
y = "Baby's Weight (bwt)") +
theme_minimal()
# Fitting the linear model
model <- lm(bwt ~ lwt, data = birthwt)
# Displaying the model summary to retrieve coefficients
summary(model)
# Given coefficients and lwt value
intercept <- 2369.624
slope <- 4.429
lwt_value <- 147
# Calculate predicted bwt
predicted_bwt <- intercept + slope * lwt_value
# Calculate the residual
observed_bwt <- 3000
residual <- observed_bwt - predicted_bwt
predicted_bwt
residual
# Given coefficients
intercept <- 2369.624
slope <- 4.429
# Calculate lwt using the relationship
lwt_original <- (observed_bwt - intercept - residual_value) / slope
# install.packages('datasauRus')
# install.packages('MASS')
library(ggplot2)
library(datasauRus)
library(MASS)
head(datasaurus_dozen)
dino <- datasaurus_dozen[datasaurus_dozen$dataset == "dino", ]
dots <- datasaurus_dozen[datasaurus_dozen$dataset == "dots", ]
circle <- datasaurus_dozen[datasaurus_dozen$dataset == "circle", ]
wide_lines <- datasaurus_dozen[datasaurus_dozen$dataset == "wide_lines", ]
dino_stats <- list(
rows_columns = dim(dino),
mean_x = mean(dino$x),
mean_y = mean(dino$y)
)
dots_stats <- list(
rows_columns = dim(dots),
mean_x = mean(dots$x),
mean_y = mean(dots$y)
)
circle_stats <- list(
rows_columns = dim(circle),
mean_x = mean(circle$x),
mean_y = mean(circle$y)
)
wide_lines_stats <- list(
rows_columns = dim(wide_lines),
mean_x = mean(wide_lines$x),
mean_y = mean(wide_lines$y)
)
list(dino = dino_stats, dots = dots_stats, circle = circle_stats, wide_lines = wide_lines_stats)
# For the dino dataset
dino_cor <- cor(dino$x, dino$y)
dino_lm <- lm(y ~ x, data = dino)
dino_coeffs <- coef(dino_lm)
# For the dots dataset
dots_cor <- cor(dots$x, dots$y)
dots_lm <- lm(y ~ x, data = dots)
dots_coeffs <- coef(dots_lm)
# For the circle dataset
circle_cor <- cor(circle$x, circle$y)
circle_lm <- lm(y ~ x, data = circle)
circle_coeffs <- coef(circle_lm)
# For the wide_lines dataset
wide_lines_cor <- cor(wide_lines$x, wide_lines$y)
wide_lines_lm <- lm(y ~ x, data = wide_lines)
wide_lines_coeffs <- coef(wide_lines_lm)
# Print out the results
list(
dino = list(correlation = dino_cor, coefficients = dino_coeffs),
dots = list(correlation = dots_cor, coefficients = dots_coeffs),
circle = list(correlation = circle_cor, coefficients = circle_coeffs),
wide_lines = list(correlation = wide_lines_cor, coefficients = wide_lines_coeffs)
)
# Dino plot
ggplot(dino, aes(x, y)) +
geom_point() +
labs(title = "dino", x = "x", y = "y")
# Dots plot
ggplot(dots, aes(x, y)) +
geom_point() +
labs(title = "dots", x = "x", y = "y")
# Circle plot
ggplot(circle, aes(x, y)) +
geom_point() +
labs(title = "circle", x = "x", y = "y")
# Wide_lines plot
ggplot(wide_lines, aes(x, y)) +
geom_point() +
labs(title = "wide_lines", x = "x", y = "y")
?birthwt
library(MASS)
# Getting the number of observations
num_observations <- nrow(birthwt)
# Getting the number of variables
num_variables <- ncol(birthwt)
num_observations
num_variables
# Assuming you have loaded the MASS package and its dataset
library(MASS)
# Selecting the relevant columns
selected_data <- birthwt[, c("bwt", "age", "lwt")]
# Creating the correlation matrix
cor_matrix <- cor(selected_data)
cor_matrix
library(ggplot2)
# Scatter plot for lwt vs bwt
ggplot(birthwt, aes(x = lwt, y = bwt)) +
geom_point() +
labs(title = "Relationship between Mother's Pre-pregnancy Weight and Baby's Weight",
x = "Mother's Pre-pregnancy Weight (lwt)",
y = "Baby's Weight (bwt)") +
theme_minimal()
# Fitting the linear model
model <- lm(bwt ~ lwt, data = birthwt)
# Displaying the model summary to retrieve coefficients
summary(model)
# Given coefficients and lwt value
intercept <- 2369.624
slope <- 4.429
lwt_value <- 147
# Calculate predicted bwt
predicted_bwt <- intercept + slope * lwt_value
# Calculate the residual
observed_bwt <- 3000
residual <- observed_bwt - predicted_bwt
predicted_bwt
residual
observed_bwt = 2743
residual_value = -40
# Calculate lwt using the relationship
lwt_original <- (observed_bwt - intercept - residual_value) / slope
lwt_original
# install.packages('datasauRus')
# install.packages('MASS')
library(ggplot2)
library(datasauRus)
library(MASS)
head(datasaurus_dozen)
dino <- datasaurus_dozen[datasaurus_dozen$dataset == "dino", ]
dots <- datasaurus_dozen[datasaurus_dozen$dataset == "dots", ]
circle <- datasaurus_dozen[datasaurus_dozen$dataset == "circle", ]
wide_lines <- datasaurus_dozen[datasaurus_dozen$dataset == "wide_lines", ]
dino_stats <- list(
rows_columns = dim(dino),
mean_x = mean(dino$x),
mean_y = mean(dino$y)
)
dots_stats <- list(
rows_columns = dim(dots),
mean_x = mean(dots$x),
mean_y = mean(dots$y)
)
circle_stats <- list(
rows_columns = dim(circle),
mean_x = mean(circle$x),
mean_y = mean(circle$y)
)
wide_lines_stats <- list(
rows_columns = dim(wide_lines),
mean_x = mean(wide_lines$x),
mean_y = mean(wide_lines$y)
)
list(dino = dino_stats, dots = dots_stats, circle = circle_stats, wide_lines = wide_lines_stats)
# For the dino dataset
dino_cor <- cor(dino$x, dino$y)
dino_lm <- lm(y ~ x, data = dino)
dino_coeffs <- coef(dino_lm)
# For the dots dataset
dots_cor <- cor(dots$x, dots$y)
dots_lm <- lm(y ~ x, data = dots)
dots_coeffs <- coef(dots_lm)
# For the circle dataset
circle_cor <- cor(circle$x, circle$y)
circle_lm <- lm(y ~ x, data = circle)
circle_coeffs <- coef(circle_lm)
# For the wide_lines dataset
wide_lines_cor <- cor(wide_lines$x, wide_lines$y)
wide_lines_lm <- lm(y ~ x, data = wide_lines)
wide_lines_coeffs <- coef(wide_lines_lm)
# Print out the results
list(
dino = list(correlation = dino_cor, coefficients = dino_coeffs),
dots = list(correlation = dots_cor, coefficients = dots_coeffs),
circle = list(correlation = circle_cor, coefficients = circle_coeffs),
wide_lines = list(correlation = wide_lines_cor, coefficients = wide_lines_coeffs)
)
# Dino plot
ggplot(dino, aes(x, y)) +
geom_point() +
labs(title = "dino", x = "x", y = "y")
# Dots plot
ggplot(dots, aes(x, y)) +
geom_point() +
labs(title = "dots", x = "x", y = "y")
# Circle plot
ggplot(circle, aes(x, y)) +
geom_point() +
labs(title = "circle", x = "x", y = "y")
# Wide_lines plot
ggplot(wide_lines, aes(x, y)) +
geom_point() +
labs(title = "wide_lines", x = "x", y = "y")
?birthwt
library(MASS)
# Getting the number of observations
num_observations <- nrow(birthwt)
# Getting the number of variables
num_variables <- ncol(birthwt)
num_observations
num_variables
# Assuming you have loaded the MASS package and its dataset
library(MASS)
# Selecting the relevant columns
selected_data <- birthwt[, c("bwt", "age", "lwt")]
# Creating the correlation matrix
cor_matrix <- cor(selected_data)
cor_matrix
library(ggplot2)
# Scatter plot for lwt vs bwt
ggplot(birthwt, aes(x = lwt, y = bwt)) +
geom_point() +
labs(title = "Relationship between Mother's Pre-pregnancy Weight and Baby's Weight",
x = "Mother's Pre-pregnancy Weight (lwt)",
y = "Baby's Weight (bwt)") +
theme_minimal()
# Fitting the linear model
model <- lm(bwt ~ lwt, data = birthwt)
# Displaying the model summary to retrieve coefficients
summary(model)
# Given coefficients and lwt value
intercept <- 2369.624
slope <- 4.429
lwt_value <- 147
# Calculate predicted bwt
predicted_bwt <- intercept + slope * lwt_value
# Calculate the residual
observed_bwt <- 3000
residual <- observed_bwt - predicted_bwt
predicted_bwt
residual
observed_bwt = 2743
residual_value = -40
# Calculate lwt using the relationship
lwt_original <- (observed_bwt - intercept - residual_value) / slope
lwt_original
# install.packages('datasauRus')
# install.packages('MASS')
library(ggplot2)
library(datasauRus)
library(MASS)
head(datasaurus_dozen)
dino <- datasaurus_dozen[datasaurus_dozen$dataset == "dino", ]
dots <- datasaurus_dozen[datasaurus_dozen$dataset == "dots", ]
circle <- datasaurus_dozen[datasaurus_dozen$dataset == "circle", ]
wide_lines <- datasaurus_dozen[datasaurus_dozen$dataset == "wide_lines", ]
dino_stats <- list(
rows_columns = dim(dino),
mean_x = mean(dino$x),
mean_y = mean(dino$y)
)
dots_stats <- list(
rows_columns = dim(dots),
mean_x = mean(dots$x),
mean_y = mean(dots$y)
)
circle_stats <- list(
rows_columns = dim(circle),
mean_x = mean(circle$x),
mean_y = mean(circle$y)
)
wide_lines_stats <- list(
rows_columns = dim(wide_lines),
mean_x = mean(wide_lines$x),
mean_y = mean(wide_lines$y)
)
list(dino = dino_stats, dots = dots_stats, circle = circle_stats, wide_lines = wide_lines_stats)
# For the dino dataset
dino_cor <- cor(dino$x, dino$y)
dino_lm <- lm(y ~ x, data = dino)
dino_coeffs <- coef(dino_lm)
# For the dots dataset
dots_cor <- cor(dots$x, dots$y)
dots_lm <- lm(y ~ x, data = dots)
dots_coeffs <- coef(dots_lm)
# For the circle dataset
circle_cor <- cor(circle$x, circle$y)
circle_lm <- lm(y ~ x, data = circle)
circle_coeffs <- coef(circle_lm)
# For the wide_lines dataset
wide_lines_cor <- cor(wide_lines$x, wide_lines$y)
wide_lines_lm <- lm(y ~ x, data = wide_lines)
wide_lines_coeffs <- coef(wide_lines_lm)
# Print out the results
list(
dino = list(correlation = dino_cor, coefficients = dino_coeffs),
dots = list(correlation = dots_cor, coefficients = dots_coeffs),
circle = list(correlation = circle_cor, coefficients = circle_coeffs),
wide_lines = list(correlation = wide_lines_cor, coefficients = wide_lines_coeffs)
)
# Dino plot
ggplot(dino, aes(x, y)) +
geom_point() +
labs(title = "dino", x = "x", y = "y")
# Dots plot
ggplot(dots, aes(x, y)) +
geom_point() +
labs(title = "dots", x = "x", y = "y")
# Circle plot
ggplot(circle, aes(x, y)) +
geom_point() +
labs(title = "circle", x = "x", y = "y")
# Wide_lines plot
ggplot(wide_lines, aes(x, y)) +
geom_point() +
labs(title = "wide_lines", x = "x", y = "y")
?birthwt
library(MASS)
# Getting the number of observations
num_observations <- nrow(birthwt)
# Getting the number of variables
num_variables <- ncol(birthwt)
num_observations
num_variables
# Assuming you have loaded the MASS package and its dataset
library(MASS)
# Selecting the relevant columns
selected_data <- birthwt[, c("bwt", "age", "lwt")]
# Creating the correlation matrix
cor_matrix <- cor(selected_data)
cor_matrix
library(ggplot2)
# Scatter plot for lwt vs bwt
ggplot(birthwt, aes(x = lwt, y = bwt)) +
geom_point() +
labs(title = "Relationship between Mother's Pre-pregnancy Weight and Baby's Weight",
x = "Mother's Pre-pregnancy Weight (lwt)",
y = "Baby's Weight (bwt)") +
theme_minimal()
# Fitting the linear model
model <- lm(bwt ~ lwt, data = birthwt)
# Displaying the model summary to retrieve coefficients
summary(model)
# Given coefficients and lwt value
intercept <- 2369.624
slope <- 4.429
lwt_value <- 147
# Calculate predicted bwt
predicted_bwt <- intercept + slope * lwt_value
# Calculate the residual
observed_bwt <- 3000
residual <- observed_bwt - predicted_bwt
predicted_bwt
residual
observed_bwt = 2743
residual_value = -40
# Calculate lwt using the relationship
lwt_original <- (observed_bwt - intercept - residual_value) / slope
lwt_original
