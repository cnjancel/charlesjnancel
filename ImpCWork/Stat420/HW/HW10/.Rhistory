# Print the coefficients table
summary(model_c)
# Convert puppy.price to GBP
data$puppy.price.pounds <- data$puppy.price * 0.82
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_d <- lm(puppy.price.pounds ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_d)
fitted_values_a <- predict(model_a)
fitted_values_b <- predict(model_b)
fitted_values_c <- predict(model_c)
fitted_values_d <- predict(model_d)
cor_matrix <- cor(cbind(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
library(GGally)
ggpairs(data.frame(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
# Calculate the number of observations
n <- length(model_a$fitted.values)
# Generate diagnostic plots
par(mfrow = c(2, 2))
plot(model_a, which = 1:4)
# Add Cook's distance threshold line
plot(model_a, which = 5)
abline(h = 4/n, col = "red", lwd = 2)
plot(model_a, which = 6)
abline(h = 4/n, col = "red", lwd = 2)
# Reset the plotting window
par(mfrow = c(1, 1))
boxcox_result <- boxcox(model_a)
summary(model_a)
airquality = na.omit(airquality)
# Remove observations with NAs
airquality <- na.omit(airquality)
# Apply a log transformation to the Ozone variable
airquality$log_Ozone <- log(airquality$Ozone)
# Fit a linear model predicting log(Ozone) from Temp
model <- lm(log_Ozone ~ Temp, data = airquality)
# Print the resulting summary table
summary(model)
# Fit a quadratic model
quadratic_model <- lm(Ozone ~ Temp + I(Temp^2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_model)
# Fit a quadratic model using the poly function for orthogonal polynomials
quadratic_poly_model <- lm(Ozone ~ poly(Temp, 2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_poly_model)
## Use this code chunk for your answer.
# Use this code chunk for your answer.
# Use this code chunk for your answer.
# Use this code chunk for your answer.
# Use this code chunk for your answer.
library(ggplot2)
library(MASS)
# Read the data
data <- read.csv("best_in_show.csv")
# Fit the linear model
model_a <- lm(puppy.price ~ longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_a)
# Add the new variable to the dataset
data$added.longevity <- data$longevity - 6.29
# Fit the new linear model
model_b <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_b)
# Adding the food.per.year variable
data$food.per.year <- data$food.per.week * 52
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_c <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_c)
# Convert puppy.price to GBP
data$puppy.price.pounds <- data$puppy.price * 0.82
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_d <- lm(puppy.price.pounds ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_d)
fitted_values_a <- predict(model_a)
fitted_values_b <- predict(model_b)
fitted_values_c <- predict(model_c)
fitted_values_d <- predict(model_d)
cor_matrix <- cor(cbind(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
library(GGally)
ggpairs(data.frame(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
# Calculate the number of observations
n <- length(model_a$fitted.values)
# Generate diagnostic plots
par(mfrow = c(2, 2))
plot(model_a, which = 1:4)
# Add Cook's distance threshold line
plot(model_a, which = 5)
abline(h = 4/n, col = "red", lwd = 2)
plot(model_a, which = 6)
abline(h = 4/n, col = "red", lwd = 2)
# Reset the plotting window
par(mfrow = c(1, 1))
boxcox_result <- boxcox(model_a)
summary(model_a)
airquality = na.omit(airquality)
# Remove observations with NAs
airquality <- na.omit(airquality)
# Apply a log transformation to the Ozone variable
airquality$log_Ozone <- log(airquality$Ozone)
# Fit a linear model predicting log(Ozone) from Temp
model <- lm(log_Ozone ~ Temp, data = airquality)
# Print the resulting summary table
summary(model)
# Fit a quadratic model
quadratic_model <- lm(Ozone ~ Temp + I(Temp^2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_model)
# Fit a quadratic model using the poly function for orthogonal polynomials
quadratic_poly_model <- lm(Ozone ~ poly(Temp, 2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_poly_model)
# Get the fitted values from both models
fitted_values_I <- fitted(quadratic_model)
fitted_values_poly <- fitted(quadratic_poly_model)
# Calculate the correlation between the fitted values
cor(fitted_values_I, fitted_values_poly)
# Plot the fitted values against each other
plot(fitted_values_I, fitted_values_poly,
xlab = "Fitted values with I(Temp^2)",
ylab = "Fitted values with poly(Temp, 2)",
main = "Comparison of Fitted Values")
# Add a 45-degree line to check for perfect agreement
abline(0, 1, col = "red")
# Use this code chunk for your answer.
# Use this code chunk for your answer.
# Use this code chunk for your answer.
# Use this code chunk for your answer.
library(ggplot2)
library(MASS)
# Read the data
data <- read.csv("best_in_show.csv")
# Fit the linear model
model_a <- lm(puppy.price ~ longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_a)
# Add the new variable to the dataset
data$added.longevity <- data$longevity - 6.29
# Fit the new linear model
model_b <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_b)
# Adding the food.per.year variable
data$food.per.year <- data$food.per.week * 52
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_c <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_c)
# Convert puppy.price to GBP
data$puppy.price.pounds <- data$puppy.price * 0.82
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_d <- lm(puppy.price.pounds ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_d)
fitted_values_a <- predict(model_a)
fitted_values_b <- predict(model_b)
fitted_values_c <- predict(model_c)
fitted_values_d <- predict(model_d)
cor_matrix <- cor(cbind(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
library(GGally)
ggpairs(data.frame(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
# Calculate the number of observations
n <- length(model_a$fitted.values)
# Generate diagnostic plots
par(mfrow = c(2, 2))
plot(model_a, which = 1:4)
# Add Cook's distance threshold line
plot(model_a, which = 5)
abline(h = 4/n, col = "red", lwd = 2)
plot(model_a, which = 6)
abline(h = 4/n, col = "red", lwd = 2)
# Reset the plotting window
par(mfrow = c(1, 1))
boxcox_result <- boxcox(model_a)
summary(model_a)
airquality = na.omit(airquality)
# Remove observations with NAs
airquality <- na.omit(airquality)
# Apply a log transformation to the Ozone variable
airquality$log_Ozone <- log(airquality$Ozone)
# Fit a linear model predicting log(Ozone) from Temp
model <- lm(log_Ozone ~ Temp, data = airquality)
# Print the resulting summary table
summary(model)
# Fit a quadratic model
quadratic_model <- lm(Ozone ~ Temp + I(Temp^2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_model)
# Fit a quadratic model using the poly function for orthogonal polynomials
quadratic_poly_model <- lm(Ozone ~ poly(Temp, 2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_poly_model)
# Get the fitted values from both models
fitted_values_I <- fitted(quadratic_model)
fitted_values_poly <- fitted(quadratic_poly_model)
# Calculate the correlation between the fitted values
cor(fitted_values_I, fitted_values_poly)
# Plot the fitted values against each other
plot(fitted_values_I, fitted_values_poly,
xlab = "Fitted values with I(Temp^2)",
ylab = "Fitted values with poly(Temp, 2)",
main = "Comparison of Fitted Values")
# Add a 45-degree line to check for perfect agreement
abline(0, 1, col = "red")
# Fit a quartic model
quartic_model <- lm(Ozone ~ poly(Temp, 4), data = airquality)
# Print the summary of the fitted coefficients
summary(quartic_model)
# Use this code chunk for your answer.
# Use this code chunk for your answer.
# Use this code chunk for your answer.
library(ggplot2)
library(MASS)
# Read the data
data <- read.csv("best_in_show.csv")
# Fit the linear model
model_a <- lm(puppy.price ~ longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_a)
# Add the new variable to the dataset
data$added.longevity <- data$longevity - 6.29
# Fit the new linear model
model_b <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_b)
# Adding the food.per.year variable
data$food.per.year <- data$food.per.week * 52
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_c <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_c)
# Convert puppy.price to GBP
data$puppy.price.pounds <- data$puppy.price * 0.82
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_d <- lm(puppy.price.pounds ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_d)
fitted_values_a <- predict(model_a)
fitted_values_b <- predict(model_b)
fitted_values_c <- predict(model_c)
fitted_values_d <- predict(model_d)
cor_matrix <- cor(cbind(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
library(GGally)
ggpairs(data.frame(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
# Calculate the number of observations
n <- length(model_a$fitted.values)
# Generate diagnostic plots
par(mfrow = c(2, 2))
plot(model_a, which = 1:4)
# Add Cook's distance threshold line
plot(model_a, which = 5)
abline(h = 4/n, col = "red", lwd = 2)
plot(model_a, which = 6)
abline(h = 4/n, col = "red", lwd = 2)
# Reset the plotting window
par(mfrow = c(1, 1))
boxcox_result <- boxcox(model_a)
summary(model_a)
airquality = na.omit(airquality)
# Remove observations with NAs
airquality <- na.omit(airquality)
# Apply a log transformation to the Ozone variable
airquality$log_Ozone <- log(airquality$Ozone)
# Fit a linear model predicting log(Ozone) from Temp
model <- lm(log_Ozone ~ Temp, data = airquality)
# Print the resulting summary table
summary(model)
# Fit a quadratic model
quadratic_model <- lm(Ozone ~ Temp + I(Temp^2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_model)
# Fit a quadratic model using the poly function for orthogonal polynomials
quadratic_poly_model <- lm(Ozone ~ poly(Temp, 2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_poly_model)
# Get the fitted values from both models
fitted_values_I <- fitted(quadratic_model)
fitted_values_poly <- fitted(quadratic_poly_model)
# Calculate the correlation between the fitted values
cor(fitted_values_I, fitted_values_poly)
# Plot the fitted values against each other
plot(fitted_values_I, fitted_values_poly,
xlab = "Fitted values with I(Temp^2)",
ylab = "Fitted values with poly(Temp, 2)",
main = "Comparison of Fitted Values")
# Add a 45-degree line to check for perfect agreement
abline(0, 1, col = "red")
# Fit a quartic model
quartic_model <- lm(Ozone ~ poly(Temp, 4), data = airquality)
# Print the summary of the fitted coefficients
summary(quartic_model)
# Compare quadratic models with quartic model
anova_table_5a <- anova(quadratic_model, quartic_model)
anova_table_5b <- anova(quadratic_poly_model, quartic_model)
# Print ANOVA tables
print(anova_table_5a)
print(anova_table_5b)
# Use this code chunk for your answer.
# Use this code chunk for your answer.
library(ggplot2)
library(MASS)
# Read the data
data <- read.csv("best_in_show.csv")
# Fit the linear model
model_a <- lm(puppy.price ~ longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_a)
# Add the new variable to the dataset
data$added.longevity <- data$longevity - 6.29
# Fit the new linear model
model_b <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_b)
# Adding the food.per.year variable
data$food.per.year <- data$food.per.week * 52
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_c <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_c)
# Convert puppy.price to GBP
data$puppy.price.pounds <- data$puppy.price * 0.82
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_d <- lm(puppy.price.pounds ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_d)
fitted_values_a <- predict(model_a)
fitted_values_b <- predict(model_b)
fitted_values_c <- predict(model_c)
fitted_values_d <- predict(model_d)
cor_matrix <- cor(cbind(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
library(GGally)
ggpairs(data.frame(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
# Calculate the number of observations
n <- length(model_a$fitted.values)
# Generate diagnostic plots
par(mfrow = c(2, 2))
plot(model_a, which = 1:4)
# Add Cook's distance threshold line
plot(model_a, which = 5)
abline(h = 4/n, col = "red", lwd = 2)
plot(model_a, which = 6)
abline(h = 4/n, col = "red", lwd = 2)
# Reset the plotting window
par(mfrow = c(1, 1))
boxcox_result <- boxcox(model_a)
summary(model_a)
airquality = na.omit(airquality)
# Remove observations with NAs
airquality <- na.omit(airquality)
# Apply a log transformation to the Ozone variable
airquality$log_Ozone <- log(airquality$Ozone)
# Fit a linear model predicting log(Ozone) from Temp
model <- lm(log_Ozone ~ Temp, data = airquality)
# Print the resulting summary table
summary(model)
# Fit a quadratic model
quadratic_model <- lm(Ozone ~ Temp + I(Temp^2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_model)
# Fit a quadratic model using the poly function for orthogonal polynomials
quadratic_poly_model <- lm(Ozone ~ poly(Temp, 2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_poly_model)
# Get the fitted values from both models
fitted_values_I <- fitted(quadratic_model)
fitted_values_poly <- fitted(quadratic_poly_model)
# Calculate the correlation between the fitted values
cor(fitted_values_I, fitted_values_poly)
# Plot the fitted values against each other
plot(fitted_values_I, fitted_values_poly,
xlab = "Fitted values with I(Temp^2)",
ylab = "Fitted values with poly(Temp, 2)",
main = "Comparison of Fitted Values")
# Add a 45-degree line to check for perfect agreement
abline(0, 1, col = "red")
# Fit a quartic model
quartic_model <- lm(Ozone ~ poly(Temp, 4), data = airquality)
# Print the summary of the fitted coefficients
summary(quartic_model)
# Compare quadratic models with quartic model
anova_table_5a <- anova(quadratic_model, quartic_model)
anova_table_5b <- anova(quadratic_poly_model, quartic_model)
# Print ANOVA tables
print(anova_table_5a)
print(anova_table_5b)
library(ggplot2)
# Scatterplot with quadratic summary line
ggplot(airquality, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE) +
ggtitle("Quadratic Model")
# Scatterplot with quartic summary line
ggplot(airquality, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 4), se = FALSE) +
ggtitle("Quartic Model")
# Use this code chunk for your answer.
library(ggplot2)
library(MASS)
# Read the data
data <- read.csv("best_in_show.csv")
# Fit the linear model
model_a <- lm(puppy.price ~ longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_a)
# Add the new variable to the dataset
data$added.longevity <- data$longevity - 6.29
# Fit the new linear model
model_b <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.week, data = data)
# Print the coefficients table
summary(model_b)
# Adding the food.per.year variable
data$food.per.year <- data$food.per.week * 52
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_c <- lm(puppy.price ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_c)
# Convert puppy.price to GBP
data$puppy.price.pounds <- data$puppy.price * 0.82
# Fit the linear model with the new variable
# Replace 'longevity' and other predictors as needed based on your dataset
model_d <- lm(puppy.price.pounds ~ added.longevity + genetic.ailments + food.per.year, data = data)
# Print the coefficients table
summary(model_d)
fitted_values_a <- predict(model_a)
fitted_values_b <- predict(model_b)
fitted_values_c <- predict(model_c)
fitted_values_d <- predict(model_d)
cor_matrix <- cor(cbind(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
library(GGally)
ggpairs(data.frame(fitted_values_a, fitted_values_b, fitted_values_c, fitted_values_d))
# Calculate the number of observations
n <- length(model_a$fitted.values)
# Generate diagnostic plots
par(mfrow = c(2, 2))
plot(model_a, which = 1:4)
# Add Cook's distance threshold line
plot(model_a, which = 5)
abline(h = 4/n, col = "red", lwd = 2)
plot(model_a, which = 6)
abline(h = 4/n, col = "red", lwd = 2)
# Reset the plotting window
par(mfrow = c(1, 1))
boxcox_result <- boxcox(model_a)
summary(model_a)
airquality = na.omit(airquality)
# Remove observations with NAs
airquality <- na.omit(airquality)
# Apply a log transformation to the Ozone variable
airquality$log_Ozone <- log(airquality$Ozone)
# Fit a linear model predicting log(Ozone) from Temp
model <- lm(log_Ozone ~ Temp, data = airquality)
# Print the resulting summary table
summary(model)
# Fit a quadratic model
quadratic_model <- lm(Ozone ~ Temp + I(Temp^2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_model)
# Fit a quadratic model using the poly function for orthogonal polynomials
quadratic_poly_model <- lm(Ozone ~ poly(Temp, 2), data = airquality)
# Print the resulting coefficients table
summary(quadratic_poly_model)
# Get the fitted values from both models
fitted_values_I <- fitted(quadratic_model)
fitted_values_poly <- fitted(quadratic_poly_model)
# Calculate the correlation between the fitted values
cor(fitted_values_I, fitted_values_poly)
# Plot the fitted values against each other
plot(fitted_values_I, fitted_values_poly,
xlab = "Fitted values with I(Temp^2)",
ylab = "Fitted values with poly(Temp, 2)",
main = "Comparison of Fitted Values")
# Add a 45-degree line to check for perfect agreement
abline(0, 1, col = "red")
# Fit a quartic model
quartic_model <- lm(Ozone ~ poly(Temp, 4), data = airquality)
# Print the summary of the fitted coefficients
summary(quartic_model)
# Compare quadratic models with quartic model
anova_table_5a <- anova(quadratic_model, quartic_model)
anova_table_5b <- anova(quadratic_poly_model, quartic_model)
# Print ANOVA tables
print(anova_table_5a)
print(anova_table_5b)
library(ggplot2)
# Scatterplot with quadratic summary line
ggplot(airquality, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE) +
ggtitle("Quadratic Model")
# Scatterplot with quartic summary line
ggplot(airquality, aes(x = Temp, y = Ozone)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 4), se = FALSE) +
ggtitle("Quartic Model")
# Fit a linear model
linear_model <- lm(Ozone ~ Temp, data = airquality)
# Generate the Box-Cox plot
boxcox_plot <- boxcox(linear_model)
